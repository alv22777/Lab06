
Lab06.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000024e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000024e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007fc  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000700  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000376  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  0000157c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ec  00000000  00000000  0000163c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000185  00000000  00000000  00001a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001bad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 af 00 	jmp	0x15e	; 0x15e <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  88:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initUART9600>:
		
    }
}


void initUART9600(void){
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
	//Rx as input, Tx as output
	DDRD &= ~(1<<DDD0);
  94:	8a b1       	in	r24, 0x0a	; 10
  96:	8e 7f       	andi	r24, 0xFE	; 254
  98:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD0);
  9a:	8a b1       	in	r24, 0x0a	; 10
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	8a b9       	out	0x0a, r24	; 10
	
	UCSR0A = 0;	UCSR0B = 0; UCSR0C = 0;
  a0:	c0 ec       	ldi	r28, 0xC0	; 192
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	18 82       	st	Y, r1
  a6:	a1 ec       	ldi	r26, 0xC1	; 193
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	1c 92       	st	X, r1
  ac:	e2 ec       	ldi	r30, 0xC2	; 194
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	10 82       	st	Z, r1
	UCSR0A |= (0<<U2X0); //UCSR0A Config
  b2:	88 81       	ld	r24, Y
  b4:	88 83       	st	Y, r24
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0)|(0<<UCSZ02); //UCSR0B Config. 
  b6:	8c 91       	ld	r24, X
  b8:	88 69       	ori	r24, 0x98	; 152
  ba:	8c 93       	st	X, r24
	UCSR0C |= (0<<UMSEL01)|(0<<UMSEL00)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00); //UCSR0C Config.
  bc:	80 81       	ld	r24, Z
  be:	86 60       	ori	r24, 0x06	; 6
  c0:	80 83       	st	Z, r24
	UBRR0 = 103;
  c2:	87 e6       	ldi	r24, 0x67	; 103
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
}
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <initADC>:

void initADC(void){
	ADMUX = 0;
  d4:	ec e7       	ldi	r30, 0x7C	; 124
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0)|(0<<REFS1)|(1<<ADLAR);
  da:	80 81       	ld	r24, Z
  dc:	80 66       	ori	r24, 0x60	; 96
  de:	80 83       	st	Z, r24
	ADCSRA = 0;
  e0:	ea e7       	ldi	r30, 0x7A	; 122
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADEN);
  e6:	80 81       	ld	r24, Z
  e8:	80 68       	ori	r24, 0x80	; 128
  ea:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADIE); 
  ec:	80 81       	ld	r24, Z
  ee:	88 60       	ori	r24, 0x08	; 8
  f0:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
  f2:	80 81       	ld	r24, Z
  f4:	80 64       	ori	r24, 0x40	; 64
  f6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  f8:	80 81       	ld	r24, Z
  fa:	87 60       	ori	r24, 0x07	; 7
  fc:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
  fe:	80 81       	ld	r24, Z
 100:	80 64       	ori	r24, 0x40	; 64
 102:	80 83       	st	Z, r24
 104:	08 95       	ret

00000106 <writeChar>:
}

void writeChar(char c){
	while(!(UCSR0A & (1<<UDRE0)));
 106:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 10a:	95 ff       	sbrs	r25, 5
 10c:	fc cf       	rjmp	.-8      	; 0x106 <writeChar>
	UDR0 = c;
 10e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 112:	08 95       	ret

00000114 <main>:
void writeChar(char);
uint8_t ASCII = 0;

int main(void)
{
	cli();
 114:	f8 94       	cli
    initUART9600();
 116:	0e 94 48 00 	call	0x90	; 0x90 <initUART9600>
	initADC();
 11a:	0e 94 6a 00 	call	0xd4	; 0xd4 <initADC>
	sei();
 11e:	78 94       	sei
    while (1) 
    {
		PORTD=(ASCII<<6);
 120:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 124:	82 95       	swap	r24
 126:	88 0f       	add	r24, r24
 128:	88 0f       	add	r24, r24
 12a:	80 7c       	andi	r24, 0xC0	; 192
 12c:	8b b9       	out	0x0b, r24	; 11
		PORTB=(ASCII>>2); 
 12e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 132:	86 95       	lsr	r24
 134:	86 95       	lsr	r24
 136:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	81 ee       	ldi	r24, 0xE1	; 225
 13c:	94 e0       	ldi	r25, 0x04	; 4
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <main+0x2a>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0x34>
 148:	00 00       	nop
		_delay_ms(100);
		writeChar(ASCII);
 14a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14e:	0e 94 83 00 	call	0x106	; 0x106 <writeChar>
		ADCSRA |= (1<<ADSC);
 152:	ea e7       	ldi	r30, 0x7A	; 122
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	80 64       	ori	r24, 0x40	; 64
 15a:	80 83       	st	Z, r24
 15c:	e1 cf       	rjmp	.-62     	; 0x120 <main+0xc>

0000015e <__vector_18>:
void writeChar(char c){
	while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = c;
}

ISR(USART_RX_vect){
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	2f 93       	push	r18
 16a:	8f 93       	push	r24
 16c:	9f 93       	push	r25
 16e:	ef 93       	push	r30
 170:	ff 93       	push	r31
	PORTB = UDR0;
 172:	e6 ec       	ldi	r30, 0xC6	; 198
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	85 b9       	out	0x05, r24	; 5
	PORTD = (UDR0);
 17a:	80 81       	ld	r24, Z
 17c:	8b b9       	out	0x0b, r24	; 11
 17e:	2f ef       	ldi	r18, 0xFF	; 255
 180:	87 ea       	ldi	r24, 0xA7	; 167
 182:	91 e6       	ldi	r25, 0x61	; 97
 184:	21 50       	subi	r18, 0x01	; 1
 186:	80 40       	sbci	r24, 0x00	; 0
 188:	90 40       	sbci	r25, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <__vector_18+0x26>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <__vector_18+0x30>
 18e:	00 00       	nop
	_delay_ms(2000);
}
 190:	ff 91       	pop	r31
 192:	ef 91       	pop	r30
 194:	9f 91       	pop	r25
 196:	8f 91       	pop	r24
 198:	2f 91       	pop	r18
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <__vector_21>:
ISR(ADC_vect){
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	8f 93       	push	r24
 1b0:	ef 93       	push	r30
 1b2:	ff 93       	push	r31
	ASCII = ADCH; 
 1b4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	ADCSRA |= (1<<ADIF); //Clear interrupt flag.
 1bc:	ea e7       	ldi	r30, 0x7A	; 122
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	80 61       	ori	r24, 0x10	; 16
 1c4:	80 83       	st	Z, r24
	
 1c6:	ff 91       	pop	r31
 1c8:	ef 91       	pop	r30
 1ca:	8f 91       	pop	r24
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <_exit>:
 1d6:	f8 94       	cli

000001d8 <__stop_program>:
 1d8:	ff cf       	rjmp	.-2      	; 0x1d8 <__stop_program>
