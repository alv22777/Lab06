
Lab06.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000098  00800100  000003b8  0000044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800198  00800198  000004e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000514  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000927  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000704  00000000  00000000  00000ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ee  00000000  00000000  000015d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  000019c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e5  00000000  00000000  00001b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000033b  00000000  00000000  00001ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002234  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 eb       	ldi	r30, 0xB8	; 184
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 39       	cpi	r26, 0x98	; 152
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e9       	ldi	r26, 0x98	; 152
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 39       	cpi	r26, 0x9B	; 155
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a8 00 	call	0x150	; 0x150 <main>
  9e:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUART9600>:
			
	}
}


void initUART9600(void){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
	//Rx as input, Tx as output
	DDRD &= ~(1<<DDD0);
  aa:	8a b1       	in	r24, 0x0a	; 10
  ac:	8e 7f       	andi	r24, 0xFE	; 254
  ae:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD0);
  b0:	8a b1       	in	r24, 0x0a	; 10
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	8a b9       	out	0x0a, r24	; 10
	
	UCSR0A = 0;	UCSR0B = 0; UCSR0C = 0; //Initial values
  b6:	c0 ec       	ldi	r28, 0xC0	; 192
  b8:	d0 e0       	ldi	r29, 0x00	; 0
  ba:	18 82       	st	Y, r1
  bc:	a1 ec       	ldi	r26, 0xC1	; 193
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	1c 92       	st	X, r1
  c2:	e2 ec       	ldi	r30, 0xC2	; 194
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	10 82       	st	Z, r1
	UCSR0A |= (0<<U2X0); //UCSR0A Config 
  c8:	88 81       	ld	r24, Y
  ca:	88 83       	st	Y, r24
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0)|(0<<UCSZ02); //UCSR0B Config. 
  cc:	8c 91       	ld	r24, X
  ce:	88 69       	ori	r24, 0x98	; 152
  d0:	8c 93       	st	X, r24
	UCSR0C |= (0<<UMSEL01)|(0<<UMSEL00)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00); //UCSR0C Config.
  d2:	80 81       	ld	r24, Z
  d4:	86 60       	ori	r24, 0x06	; 6
  d6:	80 83       	st	Z, r24
	UBRR0 = 103;
  d8:	87 e6       	ldi	r24, 0x67	; 103
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  e0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
}
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <initADC>:
void initADC(void){
	ADMUX = 0;
  ea:	ec e7       	ldi	r30, 0x7C	; 124
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0)|(0<<REFS1)|(1<<ADLAR);
  f0:	80 81       	ld	r24, Z
  f2:	80 66       	ori	r24, 0x60	; 96
  f4:	80 83       	st	Z, r24
	ADCSRA = 0;
  f6:	ea e7       	ldi	r30, 0x7A	; 122
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADEN);
  fc:	80 81       	ld	r24, Z
  fe:	80 68       	ori	r24, 0x80	; 128
 100:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADIE); 
 102:	80 81       	ld	r24, Z
 104:	88 60       	ori	r24, 0x08	; 8
 106:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 108:	80 81       	ld	r24, Z
 10a:	87 60       	ori	r24, 0x07	; 7
 10c:	80 83       	st	Z, r24
 10e:	08 95       	ret

00000110 <writeChar>:
}
void writeChar(char c){ while(!(UCSR0A & (1<<UDRE0))); UDR0 = c;}
 110:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 114:	95 ff       	sbrs	r25, 5
 116:	fc cf       	rjmp	.-8      	; 0x110 <writeChar>
 118:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 11c:	08 95       	ret

0000011e <writeLine>:
void writeLine(char* str){for(uint8_t i=0; str[i]!='\0';i++){writeChar(str[i]);} writeChar('\n');writeChar('\r');}
 11e:	0f 93       	push	r16
 120:	1f 93       	push	r17
 122:	cf 93       	push	r28
 124:	8c 01       	movw	r16, r24
 126:	c0 e0       	ldi	r28, 0x00	; 0
 128:	03 c0       	rjmp	.+6      	; 0x130 <writeLine+0x12>
 12a:	0e 94 88 00 	call	0x110	; 0x110 <writeChar>
 12e:	cf 5f       	subi	r28, 0xFF	; 255
 130:	f8 01       	movw	r30, r16
 132:	ec 0f       	add	r30, r28
 134:	f1 1d       	adc	r31, r1
 136:	80 81       	ld	r24, Z
 138:	81 11       	cpse	r24, r1
 13a:	f7 cf       	rjmp	.-18     	; 0x12a <writeLine+0xc>
 13c:	8a e0       	ldi	r24, 0x0A	; 10
 13e:	0e 94 88 00 	call	0x110	; 0x110 <writeChar>
 142:	8d e0       	ldi	r24, 0x0D	; 13
 144:	0e 94 88 00 	call	0x110	; 0x110 <writeChar>
 148:	cf 91       	pop	r28
 14a:	1f 91       	pop	r17
 14c:	0f 91       	pop	r16
 14e:	08 95       	ret

00000150 <main>:
volatile uint8_t bufferTx = 0;
volatile uint8_t input = 0;
volatile uint8_t flag = 1; //Set flag for menu
int main(void)
{
	cli();
 150:	f8 94       	cli
   	initUART9600();//UART Config
 152:	0e 94 53 00 	call	0xa6	; 0xa6 <initUART9600>
	initADC(); //ADC Config
 156:	0e 94 75 00 	call	0xea	; 0xea <initADC>
	sei();
 15a:	78 94       	sei
    while (1) 
    {
		input = 0; //Initial input, prevents infinite loops.
 15c:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <__data_end>
		
		writeLine("1. Leer potenciómetro."); 	//Display menu
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 8f 00 	call	0x11e	; 0x11e <writeLine>
		writeLine("2. Enviar ASCII.");
 168:	88 e1       	ldi	r24, 0x18	; 24
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	0e 94 8f 00 	call	0x11e	; 0x11e <writeLine>
		
		while(!(input == One || input == Two)); //Wait for valid input.
 170:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <__data_end>
 174:	81 33       	cpi	r24, 0x31	; 49
 176:	21 f0       	breq	.+8      	; 0x180 <main+0x30>
 178:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <__data_end>
 17c:	82 33       	cpi	r24, 0x32	; 50
 17e:	c1 f7       	brne	.-16     	; 0x170 <main+0x20>
		
		if(input == One){ADCSRA |= (1<<ADSC);}	//If one was received, start ADC.
 180:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <__data_end>
 184:	81 33       	cpi	r24, 0x31	; 49
 186:	29 f4       	brne	.+10     	; 0x192 <main+0x42>
 188:	ea e7       	ldi	r30, 0x7A	; 122
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	80 64       	ori	r24, 0x40	; 64
 190:	80 83       	st	Z, r24

		flag = 0; //Reset flag, will only be set when ADC/RX finishes.
 192:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		while(flag == 0);	//Wait for that to happen.
 196:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 19a:	88 23       	and	r24, r24
 19c:	e1 f3       	breq	.-8      	; 0x196 <main+0x46>
 19e:	de cf       	rjmp	.-68     	; 0x15c <main+0xc>

000001a0 <ASCII2Dec>:
	
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
}
void writeChar(char c){ while(!(UCSR0A & (1<<UDRE0))); UDR0 = c;}
void writeLine(char* str){for(uint8_t i=0; str[i]!='\0';i++){writeChar(str[i]);} writeChar('\n');writeChar('\r');}
void ASCII2Dec(uint8_t encoded){
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
	uint8_t units, tens, hundreds;
	//Using modulus operator, we can get all positions, like this. input is restricted from 000 to 255, so we'll always do it 3 times.	
	units = encoded % 10;
 1a4:	2d ec       	ldi	r18, 0xCD	; 205
 1a6:	82 9f       	mul	r24, r18
 1a8:	c1 2d       	mov	r28, r1
 1aa:	11 24       	eor	r1, r1
 1ac:	c6 95       	lsr	r28
 1ae:	c6 95       	lsr	r28
 1b0:	c6 95       	lsr	r28
 1b2:	cc 0f       	add	r28, r28
 1b4:	9c 2f       	mov	r25, r28
 1b6:	99 0f       	add	r25, r25
 1b8:	99 0f       	add	r25, r25
 1ba:	c9 0f       	add	r28, r25
 1bc:	98 2f       	mov	r25, r24
 1be:	9c 1b       	sub	r25, r28
 1c0:	c9 2f       	mov	r28, r25
	encoded = (encoded-units)/10;
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	8c 1b       	sub	r24, r28
 1c6:	91 09       	sbc	r25, r1
 1c8:	ea e0       	ldi	r30, 0x0A	; 10
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	bf 01       	movw	r22, r30
 1ce:	0e 94 b2 01 	call	0x364	; 0x364 <__divmodhi4>
	tens = encoded %10;
 1d2:	62 9f       	mul	r22, r18
 1d4:	d1 2d       	mov	r29, r1
 1d6:	11 24       	eor	r1, r1
 1d8:	d6 95       	lsr	r29
 1da:	d6 95       	lsr	r29
 1dc:	d6 95       	lsr	r29
 1de:	dd 0f       	add	r29, r29
 1e0:	8d 2f       	mov	r24, r29
 1e2:	88 0f       	add	r24, r24
 1e4:	88 0f       	add	r24, r24
 1e6:	d8 0f       	add	r29, r24
 1e8:	86 2f       	mov	r24, r22
 1ea:	8d 1b       	sub	r24, r29
 1ec:	d8 2f       	mov	r29, r24
	encoded = (encoded-tens)/10;
 1ee:	77 27       	eor	r23, r23
 1f0:	cb 01       	movw	r24, r22
 1f2:	8d 1b       	sub	r24, r29
 1f4:	91 09       	sbc	r25, r1
 1f6:	bf 01       	movw	r22, r30
 1f8:	0e 94 b2 01 	call	0x364	; 0x364 <__divmodhi4>
	hundreds = encoded % 10;
 1fc:	62 9f       	mul	r22, r18
 1fe:	81 2d       	mov	r24, r1
 200:	11 24       	eor	r1, r1
 202:	86 95       	lsr	r24
 204:	86 95       	lsr	r24
 206:	86 95       	lsr	r24
 208:	88 0f       	add	r24, r24
 20a:	28 2f       	mov	r18, r24
 20c:	22 0f       	add	r18, r18
 20e:	22 0f       	add	r18, r18
 210:	82 0f       	add	r24, r18
 212:	68 1b       	sub	r22, r24
 214:	86 2f       	mov	r24, r22

	writeChar(Zero+hundreds);	
 216:	80 5d       	subi	r24, 0xD0	; 208
 218:	0e 94 88 00 	call	0x110	; 0x110 <writeChar>
	writeChar(Zero+tens);
 21c:	80 e3       	ldi	r24, 0x30	; 48
 21e:	8d 0f       	add	r24, r29
 220:	0e 94 88 00 	call	0x110	; 0x110 <writeChar>
	writeChar(Zero+units);
 224:	80 e3       	ldi	r24, 0x30	; 48
 226:	8c 0f       	add	r24, r28
 228:	0e 94 88 00 	call	0x110	; 0x110 <writeChar>
	writeChar('\n');
 22c:	8a e0       	ldi	r24, 0x0A	; 10
 22e:	0e 94 88 00 	call	0x110	; 0x110 <writeChar>
	writeChar('\r');
 232:	8d e0       	ldi	r24, 0x0D	; 13
 234:	0e 94 88 00 	call	0x110	; 0x110 <writeChar>
}
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <__vector_18>:

ISR(USART_RX_vect){
 23e:	1f 92       	push	r1
 240:	0f 92       	push	r0
 242:	0f b6       	in	r0, 0x3f	; 63
 244:	0f 92       	push	r0
 246:	11 24       	eor	r1, r1
 248:	2f 93       	push	r18
 24a:	3f 93       	push	r19
 24c:	4f 93       	push	r20
 24e:	5f 93       	push	r21
 250:	6f 93       	push	r22
 252:	7f 93       	push	r23
 254:	8f 93       	push	r24
 256:	9f 93       	push	r25
 258:	af 93       	push	r26
 25a:	bf 93       	push	r27
 25c:	ef 93       	push	r30
 25e:	ff 93       	push	r31
	bufferTx = UDR0; input = bufferTx;	
 260:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 264:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <bufferTx>
 268:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <bufferTx>
 26c:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <__data_end>
	if(flag == 1){	//Menu "Mode"
 270:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 274:	81 30       	cpi	r24, 0x01	; 1
 276:	b1 f4       	brne	.+44     	; 0x2a4 <__vector_18+0x66>
		if(input == One){writeLine("Leyendo potenciómetro...");}
 278:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <__data_end>
 27c:	81 33       	cpi	r24, 0x31	; 49
 27e:	29 f4       	brne	.+10     	; 0x28a <__vector_18+0x4c>
 280:	89 e2       	ldi	r24, 0x29	; 41
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	0e 94 8f 00 	call	0x11e	; 0x11e <writeLine>
 288:	0d c0       	rjmp	.+26     	; 0x2a4 <__vector_18+0x66>
		else if(input == Two){writeLine("Leyendo ASCII desde terminal... \n\rIngrese ASCII...\n");}
 28a:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <__data_end>
 28e:	82 33       	cpi	r24, 0x32	; 50
 290:	29 f4       	brne	.+10     	; 0x29c <__vector_18+0x5e>
 292:	82 e4       	ldi	r24, 0x42	; 66
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	0e 94 8f 00 	call	0x11e	; 0x11e <writeLine>
 29a:	04 c0       	rjmp	.+8      	; 0x2a4 <__vector_18+0x66>
		else{writeLine("Entrada inválida. Ingrese 1 o 2.");}
 29c:	86 e7       	ldi	r24, 0x76	; 118
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	0e 94 8f 00 	call	0x11e	; 0x11e <writeLine>
	}
	
	if(flag == 0){PORTD=(bufferTx<<6); PORTB=(bufferTx>>2); flag = 1;} //Rx "Mode"
 2a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2a8:	81 11       	cpse	r24, r1
 2aa:	0f c0       	rjmp	.+30     	; 0x2ca <__vector_18+0x8c>
 2ac:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <bufferTx>
 2b0:	82 95       	swap	r24
 2b2:	88 0f       	add	r24, r24
 2b4:	88 0f       	add	r24, r24
 2b6:	80 7c       	andi	r24, 0xC0	; 192
 2b8:	8b b9       	out	0x0b, r24	; 11
 2ba:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <bufferTx>
 2be:	86 95       	lsr	r24
 2c0:	86 95       	lsr	r24
 2c2:	85 b9       	out	0x05, r24	; 5
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 2ca:	ff 91       	pop	r31
 2cc:	ef 91       	pop	r30
 2ce:	bf 91       	pop	r27
 2d0:	af 91       	pop	r26
 2d2:	9f 91       	pop	r25
 2d4:	8f 91       	pop	r24
 2d6:	7f 91       	pop	r23
 2d8:	6f 91       	pop	r22
 2da:	5f 91       	pop	r21
 2dc:	4f 91       	pop	r20
 2de:	3f 91       	pop	r19
 2e0:	2f 91       	pop	r18
 2e2:	0f 90       	pop	r0
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	0f 90       	pop	r0
 2e8:	1f 90       	pop	r1
 2ea:	18 95       	reti

000002ec <__vector_21>:
ISR(ADC_vect){
 2ec:	1f 92       	push	r1
 2ee:	0f 92       	push	r0
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	0f 92       	push	r0
 2f4:	11 24       	eor	r1, r1
 2f6:	2f 93       	push	r18
 2f8:	3f 93       	push	r19
 2fa:	4f 93       	push	r20
 2fc:	5f 93       	push	r21
 2fe:	6f 93       	push	r22
 300:	7f 93       	push	r23
 302:	8f 93       	push	r24
 304:	9f 93       	push	r25
 306:	af 93       	push	r26
 308:	bf 93       	push	r27
 30a:	ef 93       	push	r30
 30c:	ff 93       	push	r31
	ASCII = ADCH; 
 30e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 312:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <ASCII>
	ASCII2Dec(ASCII);
 316:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <ASCII2Dec>
	PORTD=(ASCII<<6);
 31a:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <ASCII>
 31e:	82 95       	swap	r24
 320:	88 0f       	add	r24, r24
 322:	88 0f       	add	r24, r24
 324:	80 7c       	andi	r24, 0xC0	; 192
 326:	8b b9       	out	0x0b, r24	; 11
	PORTB=(ASCII>>2);
 328:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <ASCII>
 32c:	86 95       	lsr	r24
 32e:	86 95       	lsr	r24
 330:	85 b9       	out	0x05, r24	; 5
	ADCSRA |= (1<<ADIF); //Clear interrupt flag.	
 332:	ea e7       	ldi	r30, 0x7A	; 122
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	80 61       	ori	r24, 0x10	; 16
 33a:	80 83       	st	Z, r24
	flag = 1;
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 342:	ff 91       	pop	r31
 344:	ef 91       	pop	r30
 346:	bf 91       	pop	r27
 348:	af 91       	pop	r26
 34a:	9f 91       	pop	r25
 34c:	8f 91       	pop	r24
 34e:	7f 91       	pop	r23
 350:	6f 91       	pop	r22
 352:	5f 91       	pop	r21
 354:	4f 91       	pop	r20
 356:	3f 91       	pop	r19
 358:	2f 91       	pop	r18
 35a:	0f 90       	pop	r0
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	0f 90       	pop	r0
 360:	1f 90       	pop	r1
 362:	18 95       	reti

00000364 <__divmodhi4>:
 364:	97 fb       	bst	r25, 7
 366:	07 2e       	mov	r0, r23
 368:	16 f4       	brtc	.+4      	; 0x36e <__divmodhi4+0xa>
 36a:	00 94       	com	r0
 36c:	07 d0       	rcall	.+14     	; 0x37c <__divmodhi4_neg1>
 36e:	77 fd       	sbrc	r23, 7
 370:	09 d0       	rcall	.+18     	; 0x384 <__divmodhi4_neg2>
 372:	0e 94 c6 01 	call	0x38c	; 0x38c <__udivmodhi4>
 376:	07 fc       	sbrc	r0, 7
 378:	05 d0       	rcall	.+10     	; 0x384 <__divmodhi4_neg2>
 37a:	3e f4       	brtc	.+14     	; 0x38a <__divmodhi4_exit>

0000037c <__divmodhi4_neg1>:
 37c:	90 95       	com	r25
 37e:	81 95       	neg	r24
 380:	9f 4f       	sbci	r25, 0xFF	; 255
 382:	08 95       	ret

00000384 <__divmodhi4_neg2>:
 384:	70 95       	com	r23
 386:	61 95       	neg	r22
 388:	7f 4f       	sbci	r23, 0xFF	; 255

0000038a <__divmodhi4_exit>:
 38a:	08 95       	ret

0000038c <__udivmodhi4>:
 38c:	aa 1b       	sub	r26, r26
 38e:	bb 1b       	sub	r27, r27
 390:	51 e1       	ldi	r21, 0x11	; 17
 392:	07 c0       	rjmp	.+14     	; 0x3a2 <__udivmodhi4_ep>

00000394 <__udivmodhi4_loop>:
 394:	aa 1f       	adc	r26, r26
 396:	bb 1f       	adc	r27, r27
 398:	a6 17       	cp	r26, r22
 39a:	b7 07       	cpc	r27, r23
 39c:	10 f0       	brcs	.+4      	; 0x3a2 <__udivmodhi4_ep>
 39e:	a6 1b       	sub	r26, r22
 3a0:	b7 0b       	sbc	r27, r23

000003a2 <__udivmodhi4_ep>:
 3a2:	88 1f       	adc	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	5a 95       	dec	r21
 3a8:	a9 f7       	brne	.-22     	; 0x394 <__udivmodhi4_loop>
 3aa:	80 95       	com	r24
 3ac:	90 95       	com	r25
 3ae:	bc 01       	movw	r22, r24
 3b0:	cd 01       	movw	r24, r26
 3b2:	08 95       	ret

000003b4 <_exit>:
 3b4:	f8 94       	cli

000003b6 <__stop_program>:
 3b6:	ff cf       	rjmp	.-2      	; 0x3b6 <__stop_program>
