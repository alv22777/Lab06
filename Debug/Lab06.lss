
Lab06.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00000358  000003ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000358  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080014a  0080014a  00000436  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000436  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000468  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000099e  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000787  00000000  00000000  00000ea6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000464  00000000  00000000  0000162d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00001a94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000437  00000000  00000000  00001bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000030e  00000000  00000000  00001ffb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002309  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e5       	ldi	r30, 0x58	; 88
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 34       	cpi	r26, 0x4A	; 74
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e4       	ldi	r26, 0x4A	; 74
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 34       	cpi	r26, 0x4D	; 77
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <main>
  9e:	0c 94 aa 01 	jmp	0x354	; 0x354 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUART9600>:
	writeLine("1. Leer potenciómetro.");
	writeLine("2. Enviar ASCII.");
	while(input != 1 || input !=2){
		
	}
}
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	8a b1       	in	r24, 0x0a	; 10
  ac:	8e 7f       	andi	r24, 0xFE	; 254
  ae:	8a b9       	out	0x0a, r24	; 10
  b0:	8a b1       	in	r24, 0x0a	; 10
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	8a b9       	out	0x0a, r24	; 10
  b6:	c0 ec       	ldi	r28, 0xC0	; 192
  b8:	d0 e0       	ldi	r29, 0x00	; 0
  ba:	18 82       	st	Y, r1
  bc:	a1 ec       	ldi	r26, 0xC1	; 193
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	1c 92       	st	X, r1
  c2:	e2 ec       	ldi	r30, 0xC2	; 194
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	10 82       	st	Z, r1
  c8:	88 81       	ld	r24, Y
  ca:	88 83       	st	Y, r24
  cc:	8c 91       	ld	r24, X
  ce:	88 69       	ori	r24, 0x98	; 152
  d0:	8c 93       	st	X, r24
  d2:	80 81       	ld	r24, Z
  d4:	86 60       	ori	r24, 0x06	; 6
  d6:	80 83       	st	Z, r24
  d8:	87 e6       	ldi	r24, 0x67	; 103
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  e0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <initADC>:
  ea:	ec e7       	ldi	r30, 0x7C	; 124
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	10 82       	st	Z, r1
  f0:	80 81       	ld	r24, Z
  f2:	80 66       	ori	r24, 0x60	; 96
  f4:	80 83       	st	Z, r24
  f6:	ea e7       	ldi	r30, 0x7A	; 122
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	10 82       	st	Z, r1
  fc:	80 81       	ld	r24, Z
  fe:	80 68       	ori	r24, 0x80	; 128
 100:	80 83       	st	Z, r24
 102:	80 81       	ld	r24, Z
 104:	88 60       	ori	r24, 0x08	; 8
 106:	80 83       	st	Z, r24
 108:	80 81       	ld	r24, Z
 10a:	80 64       	ori	r24, 0x40	; 64
 10c:	80 83       	st	Z, r24
 10e:	80 81       	ld	r24, Z
 110:	87 60       	ori	r24, 0x07	; 7
 112:	80 83       	st	Z, r24
 114:	80 81       	ld	r24, Z
 116:	80 64       	ori	r24, 0x40	; 64
 118:	80 83       	st	Z, r24
 11a:	08 95       	ret

0000011c <writeChar>:
 11c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 120:	95 ff       	sbrs	r25, 5
 122:	fc cf       	rjmp	.-8      	; 0x11c <writeChar>
 124:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 128:	08 95       	ret

0000012a <writeLine>:
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	cf 93       	push	r28
 130:	8c 01       	movw	r16, r24
 132:	c0 e0       	ldi	r28, 0x00	; 0
 134:	03 c0       	rjmp	.+6      	; 0x13c <writeLine+0x12>
 136:	0e 94 8e 00 	call	0x11c	; 0x11c <writeChar>
 13a:	cf 5f       	subi	r28, 0xFF	; 255
 13c:	f8 01       	movw	r30, r16
 13e:	ec 0f       	add	r30, r28
 140:	f1 1d       	adc	r31, r1
 142:	80 81       	ld	r24, Z
 144:	81 11       	cpse	r24, r1
 146:	f7 cf       	rjmp	.-18     	; 0x136 <writeLine+0xc>
 148:	8a e0       	ldi	r24, 0x0A	; 10
 14a:	0e 94 8e 00 	call	0x11c	; 0x11c <writeChar>
 14e:	cf 91       	pop	r28
 150:	1f 91       	pop	r17
 152:	0f 91       	pop	r16
 154:	08 95       	ret

00000156 <ASCII2Dec>:

void ASCII2Dec(uint8_t encoded){
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
	uint8_t units, tens, hundreds;
	//Using modulus operator, we can get all positions, like this. input is restricted from 000 to 255, so we'll always do it 3 times.	
	units = encoded % 10;
 15a:	2d ec       	ldi	r18, 0xCD	; 205
 15c:	82 9f       	mul	r24, r18
 15e:	c1 2d       	mov	r28, r1
 160:	11 24       	eor	r1, r1
 162:	c6 95       	lsr	r28
 164:	c6 95       	lsr	r28
 166:	c6 95       	lsr	r28
 168:	cc 0f       	add	r28, r28
 16a:	9c 2f       	mov	r25, r28
 16c:	99 0f       	add	r25, r25
 16e:	99 0f       	add	r25, r25
 170:	c9 0f       	add	r28, r25
 172:	98 2f       	mov	r25, r24
 174:	9c 1b       	sub	r25, r28
 176:	c9 2f       	mov	r28, r25
	encoded = (encoded-units)/10;
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	8c 1b       	sub	r24, r28
 17c:	91 09       	sbc	r25, r1
 17e:	ea e0       	ldi	r30, 0x0A	; 10
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	bf 01       	movw	r22, r30
 184:	0e 94 82 01 	call	0x304	; 0x304 <__divmodhi4>
	tens = encoded %10;
 188:	62 9f       	mul	r22, r18
 18a:	d1 2d       	mov	r29, r1
 18c:	11 24       	eor	r1, r1
 18e:	d6 95       	lsr	r29
 190:	d6 95       	lsr	r29
 192:	d6 95       	lsr	r29
 194:	dd 0f       	add	r29, r29
 196:	8d 2f       	mov	r24, r29
 198:	88 0f       	add	r24, r24
 19a:	88 0f       	add	r24, r24
 19c:	d8 0f       	add	r29, r24
 19e:	86 2f       	mov	r24, r22
 1a0:	8d 1b       	sub	r24, r29
 1a2:	d8 2f       	mov	r29, r24
	encoded = (encoded-tens)/10;
 1a4:	77 27       	eor	r23, r23
 1a6:	cb 01       	movw	r24, r22
 1a8:	8d 1b       	sub	r24, r29
 1aa:	91 09       	sbc	r25, r1
 1ac:	bf 01       	movw	r22, r30
 1ae:	0e 94 82 01 	call	0x304	; 0x304 <__divmodhi4>
	hundreds = encoded % 10;
 1b2:	62 9f       	mul	r22, r18
 1b4:	81 2d       	mov	r24, r1
 1b6:	11 24       	eor	r1, r1
 1b8:	86 95       	lsr	r24
 1ba:	86 95       	lsr	r24
 1bc:	86 95       	lsr	r24
 1be:	88 0f       	add	r24, r24
 1c0:	28 2f       	mov	r18, r24
 1c2:	22 0f       	add	r18, r18
 1c4:	22 0f       	add	r18, r18
 1c6:	82 0f       	add	r24, r18
 1c8:	68 1b       	sub	r22, r24
 1ca:	86 2f       	mov	r24, r22

	writeChar(Zero+hundreds);	
 1cc:	80 5d       	subi	r24, 0xD0	; 208
 1ce:	0e 94 8e 00 	call	0x11c	; 0x11c <writeChar>
	writeChar(Zero+tens);
 1d2:	80 e3       	ldi	r24, 0x30	; 48
 1d4:	8d 0f       	add	r24, r29
 1d6:	0e 94 8e 00 	call	0x11c	; 0x11c <writeChar>
	writeChar(Zero+units);
 1da:	80 e3       	ldi	r24, 0x30	; 48
 1dc:	8c 0f       	add	r24, r28
 1de:	0e 94 8e 00 	call	0x11c	; 0x11c <writeChar>

	writeChar('\n');
 1e2:	8a e0       	ldi	r24, 0x0A	; 10
 1e4:	0e 94 8e 00 	call	0x11c	; 0x11c <writeChar>
}
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <main>:
uint8_t ASCII = 0;
volatile uint8_t bufferTx = 0;
volatile uint8_t input = 0;
int main(void)
{
	cli();
 1ee:	f8 94       	cli
    initUART9600();
 1f0:	0e 94 53 00 	call	0xa6	; 0xa6 <initUART9600>
	initADC();
 1f4:	0e 94 75 00 	call	0xea	; 0xea <initADC>
	sei();
 1f8:	78 94       	sei
    while (1) 
    {
		bufferTx = 0;
 1fa:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <bufferTx>
		PORTD=(ASCII<<6);
 1fe:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <ASCII>
 202:	82 95       	swap	r24
 204:	88 0f       	add	r24, r24
 206:	88 0f       	add	r24, r24
 208:	80 7c       	andi	r24, 0xC0	; 192
 20a:	8b b9       	out	0x0b, r24	; 11
		PORTB=(ASCII>>2); 
 20c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <ASCII>
 210:	86 95       	lsr	r24
 212:	86 95       	lsr	r24
 214:	85 b9       	out	0x05, r24	; 5

		ASCII2Dec(ASCII);
 216:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <ASCII>
 21a:	0e 94 ab 00 	call	0x156	; 0x156 <ASCII2Dec>
		
		
		ADCSRA |= (1<<ADSC);
 21e:	ea e7       	ldi	r30, 0x7A	; 122
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	80 64       	ori	r24, 0x40	; 64
 226:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 228:	2f ef       	ldi	r18, 0xFF	; 255
 22a:	81 ee       	ldi	r24, 0xE1	; 225
 22c:	94 e0       	ldi	r25, 0x04	; 4
 22e:	21 50       	subi	r18, 0x01	; 1
 230:	80 40       	sbci	r24, 0x00	; 0
 232:	90 40       	sbci	r25, 0x00	; 0
 234:	e1 f7       	brne	.-8      	; 0x22e <main+0x40>
 236:	00 c0       	rjmp	.+0      	; 0x238 <main+0x4a>
 238:	00 00       	nop
 23a:	df cf       	rjmp	.-66     	; 0x1fa <main+0xc>

0000023c <__vector_18>:
	writeChar(Zero+units);

	writeChar('\n');
}

ISR(USART_RX_vect){
 23c:	1f 92       	push	r1
 23e:	0f 92       	push	r0
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	0f 92       	push	r0
 244:	11 24       	eor	r1, r1
 246:	2f 93       	push	r18
 248:	3f 93       	push	r19
 24a:	4f 93       	push	r20
 24c:	5f 93       	push	r21
 24e:	6f 93       	push	r22
 250:	7f 93       	push	r23
 252:	8f 93       	push	r24
 254:	9f 93       	push	r25
 256:	af 93       	push	r26
 258:	bf 93       	push	r27
 25a:	ef 93       	push	r30
 25c:	ff 93       	push	r31
	bufferTx = UDR0;
 25e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 262:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <bufferTx>
	input = bufferTx;
 266:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <bufferTx>
 26a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__data_end>
	if(input != 1 || input !=2){
 26e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end>
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	21 f4       	brne	.+8      	; 0x27e <__vector_18+0x42>
 276:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end>
 27a:	82 30       	cpi	r24, 0x02	; 2
 27c:	21 f0       	breq	.+8      	; 0x286 <__vector_18+0x4a>
		writeLine("Entrada inválida, ingrese 1 o 2.");
 27e:	88 e2       	ldi	r24, 0x28	; 40
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	0e 94 95 00 	call	0x12a	; 0x12a <writeLine>
	}
	PORTD=(bufferTx<<6);
 286:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <bufferTx>
 28a:	82 95       	swap	r24
 28c:	88 0f       	add	r24, r24
 28e:	88 0f       	add	r24, r24
 290:	80 7c       	andi	r24, 0xC0	; 192
 292:	8b b9       	out	0x0b, r24	; 11
	PORTB=(bufferTx>>2);
 294:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <bufferTx>
 298:	86 95       	lsr	r24
 29a:	86 95       	lsr	r24
 29c:	85 b9       	out	0x05, r24	; 5
 29e:	2f ef       	ldi	r18, 0xFF	; 255
 2a0:	83 ed       	ldi	r24, 0xD3	; 211
 2a2:	90 e3       	ldi	r25, 0x30	; 48
 2a4:	21 50       	subi	r18, 0x01	; 1
 2a6:	80 40       	sbci	r24, 0x00	; 0
 2a8:	90 40       	sbci	r25, 0x00	; 0
 2aa:	e1 f7       	brne	.-8      	; 0x2a4 <__vector_18+0x68>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <__vector_18+0x72>
 2ae:	00 00       	nop
	
	_delay_ms(1000);	
}
 2b0:	ff 91       	pop	r31
 2b2:	ef 91       	pop	r30
 2b4:	bf 91       	pop	r27
 2b6:	af 91       	pop	r26
 2b8:	9f 91       	pop	r25
 2ba:	8f 91       	pop	r24
 2bc:	7f 91       	pop	r23
 2be:	6f 91       	pop	r22
 2c0:	5f 91       	pop	r21
 2c2:	4f 91       	pop	r20
 2c4:	3f 91       	pop	r19
 2c6:	2f 91       	pop	r18
 2c8:	0f 90       	pop	r0
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	0f 90       	pop	r0
 2ce:	1f 90       	pop	r1
 2d0:	18 95       	reti

000002d2 <__vector_21>:
ISR(ADC_vect){
 2d2:	1f 92       	push	r1
 2d4:	0f 92       	push	r0
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	0f 92       	push	r0
 2da:	11 24       	eor	r1, r1
 2dc:	8f 93       	push	r24
 2de:	ef 93       	push	r30
 2e0:	ff 93       	push	r31
	ASCII = ADCH; 
 2e2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 2e6:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <ASCII>
	
	ADCSRA |= (1<<ADIF); //Clear interrupt flag.	
 2ea:	ea e7       	ldi	r30, 0x7A	; 122
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	80 61       	ori	r24, 0x10	; 16
 2f2:	80 83       	st	Z, r24
}
 2f4:	ff 91       	pop	r31
 2f6:	ef 91       	pop	r30
 2f8:	8f 91       	pop	r24
 2fa:	0f 90       	pop	r0
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	0f 90       	pop	r0
 300:	1f 90       	pop	r1
 302:	18 95       	reti

00000304 <__divmodhi4>:
 304:	97 fb       	bst	r25, 7
 306:	07 2e       	mov	r0, r23
 308:	16 f4       	brtc	.+4      	; 0x30e <__divmodhi4+0xa>
 30a:	00 94       	com	r0
 30c:	07 d0       	rcall	.+14     	; 0x31c <__divmodhi4_neg1>
 30e:	77 fd       	sbrc	r23, 7
 310:	09 d0       	rcall	.+18     	; 0x324 <__divmodhi4_neg2>
 312:	0e 94 96 01 	call	0x32c	; 0x32c <__udivmodhi4>
 316:	07 fc       	sbrc	r0, 7
 318:	05 d0       	rcall	.+10     	; 0x324 <__divmodhi4_neg2>
 31a:	3e f4       	brtc	.+14     	; 0x32a <__divmodhi4_exit>

0000031c <__divmodhi4_neg1>:
 31c:	90 95       	com	r25
 31e:	81 95       	neg	r24
 320:	9f 4f       	sbci	r25, 0xFF	; 255
 322:	08 95       	ret

00000324 <__divmodhi4_neg2>:
 324:	70 95       	com	r23
 326:	61 95       	neg	r22
 328:	7f 4f       	sbci	r23, 0xFF	; 255

0000032a <__divmodhi4_exit>:
 32a:	08 95       	ret

0000032c <__udivmodhi4>:
 32c:	aa 1b       	sub	r26, r26
 32e:	bb 1b       	sub	r27, r27
 330:	51 e1       	ldi	r21, 0x11	; 17
 332:	07 c0       	rjmp	.+14     	; 0x342 <__udivmodhi4_ep>

00000334 <__udivmodhi4_loop>:
 334:	aa 1f       	adc	r26, r26
 336:	bb 1f       	adc	r27, r27
 338:	a6 17       	cp	r26, r22
 33a:	b7 07       	cpc	r27, r23
 33c:	10 f0       	brcs	.+4      	; 0x342 <__udivmodhi4_ep>
 33e:	a6 1b       	sub	r26, r22
 340:	b7 0b       	sbc	r27, r23

00000342 <__udivmodhi4_ep>:
 342:	88 1f       	adc	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	5a 95       	dec	r21
 348:	a9 f7       	brne	.-22     	; 0x334 <__udivmodhi4_loop>
 34a:	80 95       	com	r24
 34c:	90 95       	com	r25
 34e:	bc 01       	movw	r22, r24
 350:	cd 01       	movw	r24, r26
 352:	08 95       	ret

00000354 <_exit>:
 354:	f8 94       	cli

00000356 <__stop_program>:
 356:	ff cf       	rjmp	.-2      	; 0x356 <__stop_program>
